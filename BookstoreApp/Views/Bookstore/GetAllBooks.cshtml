@using BookstoreApp.Extensions

@model BookstoreApp.Core.Models.Bookstore.BooksViewModel
@{
    ViewBag.Title = "Books";
}
@{
    int totalPages = (int)Math.Ceiling((double)Model.TotalProductsCount / Model.ProductsPerPage);
    var previousPage = Model.CurrentPage - 1;
    if (previousPage < 1)
    {
        previousPage = 1;
    }
    var nextPage = Model.CurrentPage + 1;
    if (nextPage > totalPages)
    {
        nextPage = totalPages;
    }
}

<h2 class="text-center">@ViewBag.Title</h2> 
<hr />

<form method="get" asp-action="GetAllBooks" asp-controller="Bookstore">
    <div class="container mt-4">
        <div class="row justify-content-sm-evenly form-inline">
            <div class="col-md-4 ml-2">
                @if (Model.SearchTerm != "" && Model.SearchTerm != null)
                {
                    <input class="form-control form-control-sm mr-sm-2" type="text" aria-label="Search..." name="searchTerm" value="@Model.SearchTerm">
                }
                else
                {
                    <input class="form-control form-control-sm mr-sm-2" type="text" placeholder="Search..." aria-label="Search" name="searchTerm">
                }
                <button type="submit" class="btn btn-warning btn-sm mb-2 w-100 fw-bold rounded btn-dark-text">Search</button>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label class="sort-label" asp-for="Sorting">Sort by: </label>
                    <select name="sorting" class="form-control sort mt-0" onchange="this.form.submit()">
                        @if (Model.Sorting.ToString() == "AscendingByName")
                        {
                            <option value="AscendingByName" selected>Title(A-Z)</option>
                        }
                        else
                        {
                            <option value="AscendingByName">Title(A-Z)</option>
                        }

                        @if (Model.Sorting.ToString() == "DescendingByName")
                        {
                            <option value="DescendingByName" selected>Title(Z-A)</option>
                        }
                        else
                        {
                            <option value="DescendingByName">Title(Z-A)</option>
                        }

                        @if (Model.Sorting.ToString() == "AscendingByPrice")
                        {
                            <option value="AscendingByPrice" selected>Price(Low>High)</option>
                        }
                        else
                        {
                            <option value="AscendingByPrice">Price(Low>High)</option>
                        }

                        @if (Model.Sorting.ToString() == "DescendingByPrice")
                        {
                            <option value="DescendingByPrice" selected>Price(High>Low)</option>
                        }
                        else
                        {
                            <option value="DescendingByPrice">Price(High>Low)</option>
                        }
                    </select>
                </div>

            </div>
        </div>
    </div>
</form>

<div class="text-center row">
    @foreach (var book in Model.Books)
    {
        <div class="card col-4 mt-4 me-2" style="width: 20rem;">
            <img class="card-img-top" style="width: 18rem;"
                 src="@book.ImageUrl" alt="Book Image">
            <div class="card-body">

                <h5 class="card-title mt-1">@book.Title</h5>
                <p class="mb-0">Price: @book.Price$</p>
                <p>Genre: @book.Category.</p>
            </div>
            @if (User.Identity.IsAuthenticated && User.IsAdmin() == false)
            {
                <form method="post" asp-controller="Shoppingcart" asp-action="AddToShoppingcart">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-warning btn-sm mb-2 w-100 fw-bold rounded btn-dark-text">Add to cart<span class="ion-ios-cart"></span></button>
                    <input type="hidden" name="bookId" value="@book.Id" />
                    <input type="hidden" name="amount" value="1" />
                </form>
                <form method="post" asp-controller="Readlist" asp-action="AddBookToReadList">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-warning btn-sm mb-2 w-100 fw-bold rounded btn-dark-text">Add book to read list<span class="ion-ios-cart"></span></button>
                    <input type="hidden" name="bookId" value="@book.Id" />
                </form>
            }
            <div class="col-12 px-1">
                <a asp-controller="Book" asp-action="Details" asp-route-id="@book.Id" class="btn btn-warning btn-sm mb-2 w-100 fw-bold rounded btn-dark-text">Details</a>
            </div>

            @if (User.IsAdmin())
            {
                <div class="col-12 px-1">
                    <a asp-controller="Book" asp-action="Remove" asp-route-id="@book.Id" class="btn btn-warning btn-sm mb-2 w-100 fw-bold rounded btn-dark-text">Stop the book from being sold</a>
                </div>
                <div class="col-12 px-1">
                    <a asp-controller="Admin" asp-action="ModifyBook" asp-route-id="@book.Id" class="btn btn-warning btn-sm mb-2 w-100 fw-bold rounded btn-dark-text">Edit book</a>
                </div>
            }

        </div>
    }
    <div class="row mb-5">
        <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-start">
            @if (Model.CurrentPage == 1)
            {
                <a class="btn btn-primary disabled mt-2"
                   href="@Url.Action("GetAllBooks", "Bookstore", new
							   {
								   currentPage = previousPage,
								   searchTerm = Model.SearchTerm,
								   sorting = (int)Model.Sorting
							   })">
                    &lt;&lt;
                </a>
            }
            else
            {
                <a class="btn btn-primary mt-2"
                   href="@Url.Action("GetAllBooks", "Bookstore", new
							   {
								   currentPage = previousPage,
								   searchTerm = Model.SearchTerm,
								   sorting = (int)Model.Sorting
							   })">
                    &lt;&lt;
                </a>
            }

        </div>

        <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-end">
            @if (Model.CurrentPage == totalPages || !Model.Books.Any())
            {
                <a class="btn btn-primary disabled mt-2"
                   href="@Url.Action("GetAllBooks", "Bookstore", new
							   {
								   currentPage = nextPage,
								   searchTerm = Model.SearchTerm,
								   sorting = Model.Sorting.ToString()
							   })">
                    >>
                </a>
            }
            else
            {
                <a class="btn btn-primary mt-2"
                   href="@Url.Action("GetAllBooks", "Bookstore", new
							   {
								   currentPage = nextPage,
								   searchTerm = Model.SearchTerm,
								   sorting = Model.Sorting.ToString()
							   })">
                    >>
                </a>
            }
        </div>
    </div>
</div>